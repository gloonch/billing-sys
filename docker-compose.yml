version: "3.9"
services:
    postgres:
      image: postgres:15
      container_name: postgres_container
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: password
        POSTGRES_DB: billingsys
      ports:
        - "5432:5432"
      healthcheck:
        test: [ "CMD-SHELL", "pg_isready -U postgres" ]
        interval: 10s
        timeout: 5s
        retries: 5

    app:
      build:
        context: .
        dockerfile: Dockerfile
      container_name: go_app_container
      environment:
        DB_HOST: postgres
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: password
        DB_NAME: billingsys
      ports:
        - "9000:9000"
      healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
        interval: 10s
        timeout: 5s
        retries: 3
      depends_on:
        postgres:
          condition: service_healthy


    prometheus:
      image: prom/prometheus
      container_name: prometheus
      volumes:
        - ./prometheus.yml:/etc/prometheus/prometheus.yml
      ports:
        - "9090:9090"
      networks:
        - app_network

    grafana:
      image: grafana/grafana
      container_name: grafana
      ports:
        - "3000:3000"
      environment:
        - GF_SECURITY_ADMIN_USER=admin
        - GF_SECURITY_ADMIN_PASSWORD=admin
      networks:
        - app_network

    jenkins:
      image: jenkins-docker
      container_name: jenkins
      user: root
      ports:
        - "8080:8080"
      volumes:
        - jenkins_home:/var/jenkins_home
        - /var/run/docker.sock:/var/run/docker.sock
      networks:
        - app_network



#    jenkins:
#      image: jenkins/jenkins:lts
#      container_name: jenkins
#      user: root
#      ports:
#        - "8080:8080"
#      volumes:
#        - jenkins_home:/var/jenkins_home
#        - /var/run/docker.sock:/var/run/docker.sock
#        - ./jenkins/init.groovy.d:/usr/share/jenkins/ref/init.groovy.d:rw
##        - ./Jenkinsfile:/var/jenkins_home/workspace/GoAppPipeline/Jenkinsfile:rw # executes scripts from local Jenkinsfile to create the pipeline
#      networks:
#        - app_network
#      environment:
#        - JAVA_OPTS=-Djenkins.install.runSetupWizard=false # Skip initial setup wizard
##      depends_on:
##        app:
##          condition: service_healthy
##      command: >
##        /bin/sh -c "sleep 20 && /usr/bin/tini -- /usr/local/bin/jenkins.sh"

volumes:
  postgres_data:
  jenkins_home:

networks:
  app_network:
    driver: bridge